{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\param\\\\OneDrive\\\\Desktop\\\\nodemongodbdocker\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport GoalInput from './components/goals/GoalInput';\nimport CourseGoals from './components/goals/CourseGoals';\nimport ErrorAlert from './components/UI/ErrorAlert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst backendUrl = 'http://localhost:8000';\n\nfunction App() {\n  _s();\n\n  const [loadedGoals, setLoadedGoals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(function () {\n    async function fetchData() {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch(backendUrl + '/goals');\n        const resData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(resData.message || 'Fetching the goals failed.');\n        }\n\n        setLoadedGoals(resData.goals);\n      } catch (error) {\n        setError(error.message || 'Fetching goals failed - the server responsed with an error.');\n      }\n\n      setIsLoading(false);\n    }\n\n    fetchData();\n  }, []);\n\n  async function addGoalHandler(goalText) {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(backendUrl + '/goals', {\n        method: 'POST',\n        body: JSON.stringify({\n          text: goalText\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const resData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(resData.message || 'Adding the goal failed.');\n      }\n\n      setLoadedGoals(prevGoals => {\n        const updatedGoals = [{\n          id: resData.goal.id,\n          text: goalText\n        }, ...prevGoals];\n        return updatedGoals;\n      });\n    } catch (err) {\n      setError(err.message || 'Adding a goal failed - the server responsed with an error.');\n    }\n\n    setIsLoading(false);\n  }\n\n  async function deleteGoalHandler(goalId) {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(backendUrl + '/goals/' + goalId, {\n        method: 'DELETE'\n      });\n      const resData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(resData.message || 'Deleting the goal failed.');\n      }\n\n      setLoadedGoals(prevGoals => {\n        const updatedGoals = prevGoals.filter(goal => goal.id !== goalId);\n        return updatedGoals;\n      });\n    } catch (err) {\n      setError(err.message || 'Deleting the goal failed - the server responsed with an error.');\n    }\n\n    setIsLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n      errorText: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(GoalInput, {\n      onAddGoal: addGoalHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(CourseGoals, {\n      goals: loadedGoals,\n      onDeleteGoal: deleteGoalHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nM3JntU+Fc8hOoyIUYu56OxyGts=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GoalInput","CourseGoals","ErrorAlert","backendUrl","App","loadedGoals","setLoadedGoals","isLoading","setIsLoading","error","setError","fetchData","response","fetch","resData","json","ok","Error","message","goals","addGoalHandler","goalText","method","body","JSON","stringify","text","headers","prevGoals","updatedGoals","id","goal","err","deleteGoalHandler","goalId","filter"],"sources":["C:/Users/param/OneDrive/Desktop/nodemongodbdocker/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport GoalInput from './components/goals/GoalInput';\nimport CourseGoals from './components/goals/CourseGoals';\nimport ErrorAlert from './components/UI/ErrorAlert';\n\nconst backendUrl ='http://localhost:8000';\n\nfunction App() {\n  const [loadedGoals, setLoadedGoals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(function () {\n    async function fetchData() {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch(backendUrl + '/goals');\n\n        const resData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(resData.message || 'Fetching the goals failed.');\n        }\n\n        setLoadedGoals(resData.goals);\n      } catch (error) {\n        setError(\n          error.message ||\n            'Fetching goals failed - the server responsed with an error.'\n        );\n      }\n      setIsLoading(false);\n    }\n\n    fetchData();\n  }, []);\n\n  async function addGoalHandler(goalText) {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(backendUrl + '/goals', {\n        method: 'POST',\n        body: JSON.stringify({\n          text: goalText,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(resData.message || 'Adding the goal failed.');\n      }\n\n      setLoadedGoals((prevGoals) => {\n        const updatedGoals = [\n          {\n            id: resData.goal.id,\n            text: goalText,\n          },\n          ...prevGoals,\n        ];\n        return updatedGoals;\n      });\n    } catch (err) {\n      setError(\n        err.message ||\n          'Adding a goal failed - the server responsed with an error.'\n      );\n    }\n    setIsLoading(false);\n  }\n\n  async function deleteGoalHandler(goalId) {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(backendUrl + '/goals/' + goalId, {\n        method: 'DELETE',\n      });\n\n      const resData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(resData.message || 'Deleting the goal failed.');\n      }\n\n      setLoadedGoals((prevGoals) => {\n        const updatedGoals = prevGoals.filter((goal) => goal.id !== goalId);\n        return updatedGoals;\n      });\n    } catch (err) {\n      setError(\n        err.message ||\n          'Deleting the goal failed - the server responsed with an error.'\n      );\n    }\n    setIsLoading(false);\n  }\n\n  return (\n    <div>\n      {error && <ErrorAlert errorText={error} />}\n      <GoalInput onAddGoal={addGoalHandler} />\n      {!isLoading && (\n        <CourseGoals goals={loadedGoals} onDeleteGoal={deleteGoalHandler} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;AAEA,MAAMC,UAAU,GAAE,uBAAlB;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,YAAY;IACpB,eAAeY,SAAf,GAA2B;MACzBH,YAAY,CAAC,IAAD,CAAZ;;MAEA,IAAI;QACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACV,UAAU,GAAG,QAAd,CAA5B;QAEA,MAAMW,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;;QAEA,IAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;UAChB,MAAM,IAAIC,KAAJ,CAAUH,OAAO,CAACI,OAAR,IAAmB,4BAA7B,CAAN;QACD;;QAEDZ,cAAc,CAACQ,OAAO,CAACK,KAAT,CAAd;MACD,CAVD,CAUE,OAAOV,KAAP,EAAc;QACdC,QAAQ,CACND,KAAK,CAACS,OAAN,IACE,6DAFI,CAAR;MAID;;MACDV,YAAY,CAAC,KAAD,CAAZ;IACD;;IAEDG,SAAS;EACV,CAxBQ,EAwBN,EAxBM,CAAT;;EA0BA,eAAeS,cAAf,CAA8BC,QAA9B,EAAwC;IACtCb,YAAY,CAAC,IAAD,CAAZ;;IAEA,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACV,UAAU,GAAG,QAAd,EAAwB;QAClDmB,MAAM,EAAE,MAD0C;QAElDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACnBC,IAAI,EAAEL;QADa,CAAf,CAF4C;QAKlDM,OAAO,EAAE;UACP,gBAAgB;QADT;MALyC,CAAxB,CAA5B;MAUA,MAAMb,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;;MAEA,IAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAUH,OAAO,CAACI,OAAR,IAAmB,yBAA7B,CAAN;MACD;;MAEDZ,cAAc,CAAEsB,SAAD,IAAe;QAC5B,MAAMC,YAAY,GAAG,CACnB;UACEC,EAAE,EAAEhB,OAAO,CAACiB,IAAR,CAAaD,EADnB;UAEEJ,IAAI,EAAEL;QAFR,CADmB,EAKnB,GAAGO,SALgB,CAArB;QAOA,OAAOC,YAAP;MACD,CATa,CAAd;IAUD,CA3BD,CA2BE,OAAOG,GAAP,EAAY;MACZtB,QAAQ,CACNsB,GAAG,CAACd,OAAJ,IACE,4DAFI,CAAR;IAID;;IACDV,YAAY,CAAC,KAAD,CAAZ;EACD;;EAED,eAAeyB,iBAAf,CAAiCC,MAAjC,EAAyC;IACvC1B,YAAY,CAAC,IAAD,CAAZ;;IAEA,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACV,UAAU,GAAG,SAAb,GAAyB+B,MAA1B,EAAkC;QAC5DZ,MAAM,EAAE;MADoD,CAAlC,CAA5B;MAIA,MAAMR,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;;MAEA,IAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAUH,OAAO,CAACI,OAAR,IAAmB,2BAA7B,CAAN;MACD;;MAEDZ,cAAc,CAAEsB,SAAD,IAAe;QAC5B,MAAMC,YAAY,GAAGD,SAAS,CAACO,MAAV,CAAkBJ,IAAD,IAAUA,IAAI,CAACD,EAAL,KAAYI,MAAvC,CAArB;QACA,OAAOL,YAAP;MACD,CAHa,CAAd;IAID,CAfD,CAeE,OAAOG,GAAP,EAAY;MACZtB,QAAQ,CACNsB,GAAG,CAACd,OAAJ,IACE,gEAFI,CAAR;IAID;;IACDV,YAAY,CAAC,KAAD,CAAZ;EACD;;EAED,oBACE;IAAA,WACGC,KAAK,iBAAI,QAAC,UAAD;MAAY,SAAS,EAAEA;IAAvB;MAAA;MAAA;MAAA;IAAA,QADZ,eAEE,QAAC,SAAD;MAAW,SAAS,EAAEW;IAAtB;MAAA;MAAA;MAAA;IAAA,QAFF,EAGG,CAACb,SAAD,iBACC,QAAC,WAAD;MAAa,KAAK,EAAEF,WAApB;MAAiC,YAAY,EAAE4B;IAA/C;MAAA;MAAA;MAAA;IAAA,QAJJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GA1GQ7B,G;;KAAAA,G;AA4GT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}